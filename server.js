const express = require('express');
const { Telegraf } = require('telegraf');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN || '7663354158:AAE4IPRivuKaufQfPKAG0M3EGcZnMenNRWw';
const YOUR_USER_ID = process.env.YOUR_USER_ID || '6981934499';
const YOUR_TON_ADDRESS = process.env.YOUR_TON_ADDRESS || 'UQAtQQcUpO_Y_VrUi2mVqVkUikLa2O3LrIP1bExtj3ck9PAs';
const TON_API_KEY = process.env.TON_API_KEY || '185.3.181.32';

const bot = new Telegraf(BOT_TOKEN);
const userStars = new Map();
const pendingTransactions = new Map();

// –ö—É—Ä—Å –æ–±–º–µ–Ω–∞
const RATES = {
  TON: { 
    15: 0.1,
    50: 0.2, 
    80: 0.3
  },
  TG_STARS: {
    15: 15,
    50: 50,
    80: 80
  }
};

// Middleware
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function checkTonTransaction(userId, amount) {
  try {
    const response = await axios.get(`https://tonapi.io/v2/accounts/${YOUR_TON_ADDRESS}/events`, {
      headers: { Authorization: `Bearer ${TON_API_KEY}` }
    });
    
    const transactions = response.data.events || [];
    for (const event of transactions) {
      if (event.actions) {
        for (const action of event.actions) {
          if (action.type === 'ton_transfer' && 
              action.ton_transfer.recipient.address === YOUR_TON_ADDRESS &&
              action.ton_transfer.amount >= amount * 1000000000 * 0.9) {
            if (action.ton_transfer.comment && action.ton_transfer.comment.includes(`ID:${userId}`)) {
              return true;
            }
          }
        }
      }
    }
    return false;
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON:', error.message);
    return false;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
bot.command('add', async (ctx) => {
  if (ctx.from.id.toString() === YOUR_USER_ID) {
    const args = ctx.message.text.split(' ');
    if (args.length === 3) {
      const userId = args[1];
      const amount = parseInt(args[2]);
      
      if (!isNaN(amount) && amount > 0) {
        const currentBalance = userStars.get(userId) || 0;
        const newBalance = currentBalance + amount;
        userStars.set(userId, newBalance);
        
        await ctx.reply(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} –∑–≤–µ–∑–¥\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠êÔ∏è`);
        
        try {
          await bot.telegram.sendMessage(
            userId,
            `üéâ *–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!*\n\nüíé –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${amount} –∑–≤–µ–∑–¥\nüí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${newBalance} ‚≠êÔ∏è\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.`);
        }
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add USER_ID AMOUNT');
      }
    } else {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add USER_ID AMOUNT');
    }
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('balance', async (ctx) => {
  if (ctx.from.id.toString() === YOUR_USER_ID) {
    const args = ctx.message.text.split(' ');
    if (args.length === 2) {
      const userId = args[1];
      const balance = userStars.get(userId) || 0;
      await ctx.reply(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${balance} –∑–≤–µ–∑–¥`);
    } else {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /balance USER_ID');
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.command('start', async (ctx) => {
  const userId = ctx.from.id;
  const currentStars = userStars.get(userId) || 0;
  
  await ctx.reply(
    `üéÆ *GIFT MASTER* - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n‚≠êÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentStars} –∑–≤–µ–∑–¥\n\nüíé *–°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*\n‚Ä¢ üíé TON - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n‚Ä¢ ‚≠êÔ∏è –ó–≤—ë–∑–¥—ã TG - —Ä—É—á–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíé TON (–∞–≤—Ç–æ)', callback_data: 'ton_donate' }],
          [{ text: '‚≠êÔ∏è –ó–≤—ë–∑–¥—ã TG', callback_data: 'tgstars_donate' }],
          [{ text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'check_balance' }]
        ]
      }
    }
  );
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON
bot.action('ton_donate', async (ctx) => {
  await ctx.editMessageText(
    `üíé *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON*\n\nüí∞ *–ü–∞–∫–µ—Ç—ã:*\n‚Ä¢ 15 –∑–≤–µ–∑–¥ - 0.1 TON\n‚Ä¢ 50 –∑–≤–µ–∑–¥ - 0.2 TON\n‚Ä¢ 80 –∑–≤–µ–∑–¥ - 0.3 TON\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '15 –∑–≤–µ–∑–¥ (0.1 TON)', callback_data: 'ton_15' }],
          [{ text: '50 –∑–≤–µ–∑–¥ (0.2 TON)', callback_data: 'ton_50' }],
          [{ text: '80 –∑–≤–µ–∑–¥ (0.3 TON)', callback_data: 'ton_80' }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
        ]
      }
    }
  );
});

// –í—ã–±–æ—Ä —Å—É–º–º—ã TON
bot.action(/ton_(\d+)/, async (ctx) => {
  const starsAmount = parseInt(ctx.match[1]);
  const userId = ctx.from.id;
  const tonAmount = RATES.TON[starsAmount];

  await ctx.editMessageText(
    `üíé *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${starsAmount} –∑–≤–µ–∑–¥*\n\nüí∞ –°—É–º–º–∞: ${tonAmount} TON\n\n‚û°Ô∏è *–ê–¥—Ä–µ—Å TON:*\n\`${YOUR_TON_ADDRESS}\`\n\nüìù *–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ:*\n\`ID:${userId}\`\n\n‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç\n\n‚ö†Ô∏è *–í–ê–ñ–ù–û:* –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞`,
    {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `check_ton_${starsAmount}` }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'ton_donate' }]
        ]
      }
    }
  );

  pendingTransactions.set(`ton_${userId}_${Date.now()}`, {
    userId,
    starsAmount,
    type: 'TON',
    amount: tonAmount,
    timestamp: Date.now()
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞
bot.action(/check_ton_(\d+)/, async (ctx) => {
  const starsAmount = parseInt(ctx.match[1]);
  const userId = ctx.from.id;
  const tonAmount = RATES.TON[starsAmount];
  
  await ctx.answerCbQuery('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...');
  
  const isConfirmed = await checkTonTransaction(userId, tonAmount);
  
  if (isConfirmed) {
    const newBalance = (userStars.get(userId) || 0) + starsAmount;
    userStars.set(userId, newBalance);
    
    await ctx.editMessageText(
      `üéâ *–û–ø–ª–∞—Ç–∞ TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\nüíé –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${starsAmount} –∑–≤–µ–∑–¥\nüí∞ –ë–∞–ª–∞–Ω—Å: ${newBalance} ‚≠êÔ∏è\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'check_balance' }],
            [{ text: 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ', callback_data: 'ton_donate' }]
          ]
        }
      }
    );
  } else {
    await ctx.editMessageText(
      `‚ùå *–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞: \`${YOUR_TON_ADDRESS}\`\n2. –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: \`ID:${userId}\`\n3. –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞: ${tonAmount} TON\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`,
      {
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `check_ton_${starsAmount}` }],
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'ton_donate' }]
          ]
        }
      }
    );
  }
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏ TG
bot.action('tgstars_donate', async (ctx) => {
  await ctx.editMessageText(
    `‚≠êÔ∏è *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏ Telegram*\n\nüí∞ *–ü–∞–∫–µ—Ç—ã:*\n‚Ä¢ 15 –∑–≤–µ–∑–¥ - 15‚≠êÔ∏è TG\n‚Ä¢ 50 –∑–≤–µ–∑–¥ - 50‚≠êÔ∏è TG\n‚Ä¢ 80 –∑–≤–µ–∑–¥ - 80‚≠êÔ∏è TG\n\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–≤—ë–∑–¥—ã @HOKKEY77\n2. –ù–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)"\n3. –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –ø–æ–ø–æ–ª–Ω—é –±–∞–ª–∞–Ω—Å`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '15 –∑–≤–µ–∑–¥ (15‚≠êÔ∏è TG)', callback_data: 'tgstars_15' }],
          [{ text: '50 –∑–≤–µ–∑–¥ (50‚≠êÔ∏è TG)', callback_data: 'tgstars_50' }],
          [{ text: '80 –∑–≤–µ–∑–¥ (80‚≠êÔ∏è TG)', callback_data: 'tgstars_80' }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
        ]
      }
    }
  );
});

// –í—ã–±–æ—Ä —Å—É–º–º—ã –∑–≤–µ–∑–¥ TG
bot.action(/tgstars_(\d+)/, async (ctx) => {
  const starsAmount = parseInt(ctx.match[1]);
  const userId = ctx.from.id;
  const tgStarsAmount = RATES.TG_STARS[starsAmount];

  await ctx.editMessageText(
    `‚≠êÔ∏è *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${starsAmount} –∑–≤–µ–∑–¥*\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tgStarsAmount} –∑–≤—ë–∑–¥ TG\n\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ${tgStarsAmount}‚≠êÔ∏è @HOKKEY77\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n3. –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –ø–æ–ø–æ–ª–Ω—é –≤–∞—à –±–∞–ª–∞–Ω—Å`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–≤—ë–∑–¥—ã', callback_data: `confirm_tgstars_${starsAmount}` }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'tgstars_donate' }]
        ]
      }
    }
  );
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥ TG
bot.action(/confirm_tgstars_(\d+)/, async (ctx) => {
  const starsAmount = parseInt(ctx.match[1]);
  const userId = ctx.from.id;
  const tgStarsAmount = RATES.TG_STARS[starsAmount];

  await ctx.editMessageText(
    `‚úÖ *–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!*\n\n–Ø –ø—Ä–æ–≤–µ—Ä—é –ø–æ–ª—É—á–µ–Ω–∏–µ ${tgStarsAmount} –∑–≤—ë–∑–¥ –∏ –ø–æ–ø–æ–ª–Ω—é –≤–∞—à –±–∞–ª–∞–Ω—Å.\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç.`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'check_balance' }]
        ]
      }
    }
  );

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  try {
    await bot.telegram.sendMessage(
      YOUR_USER_ID,
      `‚≠êÔ∏è *–ó–ê–ü–†–û–° –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ó–í–Å–ó–î–ê–ú–ò*\n\nüë§ –ò–≥—Ä–æ–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\nüìå Username: @${ctx.from.username || '–Ω–µ—Ç'}\nüÜî ID: ${userId}\nüíé –û–∂–∏–¥–∞–µ—Ç: ${starsAmount} –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥\nüí∞ –î–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${tgStarsAmount}‚≠êÔ∏è TG\n\n‚úÖ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/add ${userId} ${starsAmount}`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
bot.action('check_balance', async (ctx) => {
  const userId = ctx.from.id;
  const currentStars = userStars.get(userId) || 0;
  await ctx.reply(`üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentStars} –∑–≤–µ–∑–¥`);
});

// –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('back_to_start', async (ctx) => {
  await ctx.deleteMessage();
  const userId = ctx.from.id;
  const currentStars = userStars.get(userId) || 0;
  
  await ctx.telegram.sendMessage(
    ctx.from.id,
    `üéÆ *GIFT MASTER* - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n‚≠êÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentStars} –∑–≤–µ–∑–¥\n\nüíé *–°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*\n‚Ä¢ üíé TON - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n‚Ä¢ ‚≠êÔ∏è –ó–≤—ë–∑–¥—ã TG - —Ä—É—á–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíé TON (–∞–≤—Ç–æ)', callback_data: 'ton_donate' }],
          [{ text: '‚≠êÔ∏è –ó–≤—ë–∑–¥—ã TG', callback_data: 'tgstars_donate' }],
          [{ text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'check_balance' }]
        ]
      }
    }
  );
});

// –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
setInterval(async () => {
  for (const [txId, txData] of pendingTransactions.entries()) {
    if (txData.type === 'TON' && Date.now() - txData.timestamp < 3600000) {
      const isConfirmed = await checkTonTransaction(txData.userId, txData.amount);
      
      if (isConfirmed) {
        const newBalance = (userStars.get(txData.userId) || 0) + txData.starsAmount;
        userStars.set(txData.userId, newBalance);
        
        await bot.telegram.sendMessage(
          txData.userId,
          `üéâ *–û–ø–ª–∞—Ç–∞ TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\nüíé –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${txData.starsAmount} –∑–≤–µ–∑–¥\nüí∞ –ë–∞–ª–∞–Ω—Å: ${newBalance} ‚≠êÔ∏è`,
          { parse_mode: 'Markdown' }
        );
        
        pendingTransactions.delete(txId);
      }
    }
  }
}, 30000);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.send('Gift Master Bot is running!');
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
}).catch(err => {
  console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
});

// Graceful shutdown
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  process.exit(0);
});

process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  process.exit(0);
});